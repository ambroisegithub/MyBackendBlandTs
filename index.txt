git rm --cached .env
git rm --cached .env.local
git rm --cached -r node_modules/
rm -rf .git
"""We  need To make Review, Pull Request on The Develop Branch"""
BodyParser:It processes incoming request bodies, making it easier to handle POST and PUT requests.
By parsing the body of an HTTP request and attaching it to the req. body property,
it simplifies data extraction and manipulation in server-side logic.


express is imported as the main framework for building the web application.

dotenv is imported to handle environment variables.

cors is imported to enable Cross-Origin Resource Sharing.

helmet is imported to add security headers to HTTP responses.

The code checks if the PORT environment variable is defined. If not, a message is logged to the console.

The PORT variable is parsed from a string to an integer using parseInt().

An instance of the Express application is created using express() and assigned to the app variable.

Middleware functions are added to the Express application:

express.json() is used to parse JSON bodies of incoming requests.

express.urlencoded({extended : true}) is used to parse URL-encoded bodies of incoming requests.

cors() is used to enable Cross-Origin Resource Sharing.

helmet() is used to enhance the security of the application by setting various HTTP headers.




import BlogModel from "../models/blogModels"
import commentModel from "../models/commentModel"
import {UploadToCloud} from "../helpers/cloud.js"
export const getAllBlogs = async (req, res) => {
  try {
    const blogs = await BlogModel.find();
    return res.status(200).json({
      status: "success",
      number: blogs.length,
      blogs,
    });
  } catch (error) {
    return res.status(404).json({
      status: "failed",
      error: error.message,
    });
  }
};
export const CreatePost = async (req, res) => {
  try {
    const result = await UploadToCloud(req.file, res);
    const newPost = await BlogModel.create({
      title: req.body.title,
      description: req.body.description,
      image: result.secure_url,
    });
    return res.status(201).json({
      status: "success",
      message: "Blog created successfully",
      content: {
        newPost,
      },
    });
  } catch (error) {
    return res.status(400).json({
      status: "failed",
      error: error.message,
    });
  }
};
export const updatePost = async (req, res) => {
  try {
    const id = req.params.id;
    const result = await UploadToCloud(req.file, res);

    const post = await BlogModel.findById(id);
    if (!post) {
      return res.status(400).json({
        status: "failed",
        message: "Id of post not found",
      });
    }
    await BlogModel.findByIdAndUpdate(id, {
      title: req.body.title,
      description: req.body.description,
      image: result.secure_url,
    });

    return res.status(200).json({
      status: "success",
      message: "Post updated successfully",
    });
  } catch (error) {
    return res.status(400).json({
      status: "failed",
      error: error,
    });
  }
};

export const getSinglePost = async (req, res) => {
  try {
    const id = req.params.id;
    const post = await BlogModel.findById(id);
    if (!post) {
      return res.status(400).json({
        status: "failed",
        message: "Id of post not found",
      });
    }
    return res.status(200).json({
      status: "success",
      post,
    });
  } catch (error) {
    return res.status(400).json({
      status: "failed",
      error: error,
    });
  }
};
export const deletePost = async (req, res) => {
  const id = req.params.id;

  try {
    const post = await BlogModel.findByIdAndDelete(id);
    if (!post) {
      return res.status(400).json({
        status: "failed",
        message: "Id of post not found",
      });
    }
    return res.status(204).json({
      status: "success",
      message: "Post deleted successfully",
    });
  } catch (error) {
    return res.status(400).json({
      status: "failed",
      error,
    });
  }
};

export const createComment = async (req, res) => {
  try {
    const post = await BlogModel.findById(req.params.id);
    if (!post) {
      return res.status(400).json({
        status: "failed",
        message: "comment added the id not",
      });
    }
    const comment = new commentModel({
      name: req.body.name,
      email: req.body.email,
      comment: req.body.comment,
    });
    post.comments.push(comment);
    await post.save();
    return res.status(201).json({
      status: "success",
      message: "comment created successfully",
      comment,
    });
  } catch (error) {
    return res.status(400).json({
      status: "success",
      error: error,
    });
  }
};




// import app from "./app";
// import mongoose from "mongoose";
// import dotenv from "dotenv";
// import  { Request, Response } from "express";

// dotenv.config();

// mongoose.set("strictQuery", false);
// mongoose
//   .connect(process.env.MONGODB_URL as string)
//   .then(() => {
//     console.log("DB CONNECTED");
//   })
//   .catch((err:Error) => {
//     console.log(err);
//   });
//   const PORT:number = Number(process.env.PORT);
//   app.listen(PORT,()=>{
//     console.log(`The Server is connected on ${PORT}`)
//   })


//   export default app;




// import bodyParser from "body-parser";
// import morgan from "morgan";
// import  { Application, Request, Response } from "express";
// import commentRoutes from "./src/Routes/commentRoutes";
// // import upload from "./src/Helpers/multer";
// import userRoutes from "./src/Routes/UserRoute"
// import blogRoutes from "./src/Routes/BlogRoute";
// import contactUsRoutes from "./src/Routes/contactUsRoutes";
// import subscribeRoutes from "./src/Routes/subscribeRoute";
// import cors from "cors";
// import express  from "express";
// import helmet from "helmet";
// // import { Blog } from "./src/Models/BlogModel";
// const app:Application = express();
// app.use(bodyParser.json())
// app.use(bodyParser.urlencoded({ extended: false }));
// app.use(cors());
// app.use(helmet());
// app.use(morgan("dev"));
// // app.use(upload.single("image"));
// app.use('/api/user', userRoutes);
// app.use('/api/blog', blogRoutes);
// app.use('/api/blog', commentRoutes);
// app.use('/api/contactus', contactUsRoutes);
// app.use('/api/subscribe', subscribeRoutes);


// app.get("/", (req: Request, res: Response) => {
//     return res.json({ message: "Welcome  To My portfolio API" });
//   });

// export default app;

